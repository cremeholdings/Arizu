"use strict";(()=>{var e={};e.id=172,e.ids=[172],e.modules={72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78893:e=>{e.exports=require("buffer")},84770:e=>{e.exports=require("crypto")},55315:e=>{e.exports=require("path")},35816:e=>{e.exports=require("process")},6162:e=>{e.exports=require("worker_threads")},72254:e=>{e.exports=require("node:buffer")},6005:e=>{e.exports=require("node:crypto")},87561:e=>{e.exports=require("node:fs")},88849:e=>{e.exports=require("node:http")},22286:e=>{e.exports=require("node:https")},87503:e=>{e.exports=require("node:net")},49411:e=>{e.exports=require("node:path")},97742:e=>{e.exports=require("node:process")},84492:e=>{e.exports=require("node:stream")},72477:e=>{e.exports=require("node:stream/web")},41041:e=>{e.exports=require("node:url")},47261:e=>{e.exports=require("node:util")},65628:e=>{e.exports=require("node:zlib")},76109:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>A,patchFetch:()=>w,requestAsyncStorage:()=>P,routeModule:()=>v,serverHooks:()=>I,staticGenerationAsyncStorage:()=>x});var o={};r.r(o),r.d(o,{POST:()=>f});var s=r(49303),n=r(88716),a=r(60670),i=r(87070),p=r(96471),l=r(21067);let c=require("fs");var u=r(55315),d=r(70907);let m=(0,c.readFileSync)((0,u.join)(process.cwd(),"lib/llm/system-prompts/planner.txt"),"utf-8"),g={anthropic:{name:"anthropic",async generateResponse(e,t){let r=process.env.ANTHROPIC_API_KEY;if(!r)throw Error("ANTHROPIC_API_KEY environment variable is required");let o=await fetch("https://api.anthropic.com/v1/messages",{method:"POST",headers:{"Content-Type":"application/json","x-api-key":r,"anthropic-version":"2023-06-01"},body:JSON.stringify({model:"claude-3-5-sonnet-20241022",max_tokens:4096,system:e,messages:[{role:"user",content:t}],temperature:.1})});if(!o.ok){let e=await o.text();throw Error(`Anthropic API error: ${o.status} ${o.statusText} - ${e}`)}let s=await o.json();if(!s.content||!Array.isArray(s.content)||0===s.content.length)throw Error("Invalid response format from Anthropic API");let n=s.content.find(e=>"text"===e.type);if(!n)throw Error("No text content found in Anthropic API response");return n.text}},openai:{name:"openai",async generateResponse(e,t){let r=process.env.OPENAI_API_KEY;if(!r)throw Error("OPENAI_API_KEY environment variable is required");let o=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify({model:"gpt-4o",messages:[{role:"system",content:e},{role:"user",content:t}],temperature:.1,max_tokens:4096,response_format:{type:"json_object"}})});if(!o.ok){let e=await o.text();throw Error(`OpenAI API error: ${o.status} ${o.statusText} - ${e}`)}let s=await o.json();if(!s.choices||!Array.isArray(s.choices)||0===s.choices.length)throw Error("Invalid response format from OpenAI API");let n=s.choices[0];if(!n.message||!n.message.content)throw Error("No content found in OpenAI API response");return n.message.content}},google:{name:"google",async generateResponse(e,t){let r=process.env.GOOGLE_API_KEY;if(!r)throw Error("GOOGLE_API_KEY environment variable is required");let o=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=${r}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:`${e}

User request: ${t}`}]}],generationConfig:{temperature:.1,maxOutputTokens:4096,responseMimeType:"application/json"}})});if(!o.ok){let e=await o.text();throw Error(`Google API error: ${o.status} ${o.statusText} - ${e}`)}let s=await o.json();if(!s.candidates||!Array.isArray(s.candidates)||0===s.candidates.length)throw Error("Invalid response format from Google API");let n=s.candidates[0];if(!n.content||!n.content.parts||!Array.isArray(n.content.parts))throw Error("No content found in Google API response");let a=n.content.parts.find(e=>e.text);if(!a)throw Error("No text content found in Google API response");return a.text}},mistral:{name:"mistral",async generateResponse(e,t){let r=process.env.MISTRAL_API_KEY;if(!r)throw Error("MISTRAL_API_KEY environment variable is required");let o=await fetch("https://api.mistral.ai/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify({model:"mistral-large-latest",messages:[{role:"system",content:e},{role:"user",content:t}],temperature:.1,max_tokens:4096,response_format:{type:"json_object"}})});if(!o.ok){let e=await o.text();throw Error(`Mistral API error: ${o.status} ${o.statusText} - ${e}`)}let s=await o.json();if(!s.choices||!Array.isArray(s.choices)||0===s.choices.length)throw Error("Invalid response format from Mistral API");let n=s.choices[0];if(!n.message||!n.message.content)throw Error("No content found in Mistral API response");return n.message.content}}};async function h({prompt:e,orgId:t,maxRetries:r=3}){let o=function(){let e=process.env.MODEL_PROVIDER||"anthropic",t=g[e];if(!t)throw Error(`Unknown MODEL_PROVIDER: ${e}. Available providers: ${Object.keys(g).join(", ")}`);return t}(),s=[];console.log("Generating plan",{provider:o.name,orgId:t.slice(0,8)+"...",promptLength:e.length,promptPreview:e.slice(0,100).replace(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g,"[EMAIL]").replace(/\b(?:sk|pk)_[a-zA-Z0-9]{32,}\b/g,"[API_KEY]").replace(/\b(?:Bearer\s+)[a-zA-Z0-9_-]+/g,"Bearer [TOKEN]")+"..."});for(let a=1;a<=r;a++)try{var n;let i,p=e;a>1&&s.length>0&&(p=`${e}

Previous attempt failed validation with these errors:
${s.map(e=>`- ${e}`).join("\n")}

Please fix these issues and return valid JSON.`);let l=(n=p,`${n}

You must return ONLY valid JSON matching the Plan schema. No prose, explanations, or markdown. Just the JSON object.`);console.log(`Plan generation attempt ${a}/${r}`,{orgId:t.slice(0,8)+"...",provider:o.name,promptLength:l.length});let c=await o.generateResponse(m,l),u=function(e){let t=e.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);if(t)return t[1];let r=e.trim();if(r.startsWith("{")&&r.endsWith("}"))return r;let o=e.match(/\{[\s\S]*\}/);return o?o[0]:e}(c);try{i=JSON.parse(u)}catch(e){s=[`Invalid JSON format: ${e instanceof Error?e.message:"Unknown error"}`],console.warn(`JSON parse failed on attempt ${a}`,{orgId:t.slice(0,8)+"...",error:e instanceof Error?e.message:"Unknown error",responsePreview:c.slice(0,200)+"..."});continue}let g=(0,d.NH)(i);if(g.valid)return console.log(`Plan generated successfully on attempt ${a}`,{orgId:t.slice(0,8)+"...",planName:g.data?.name,stepCount:g.data?.steps.length}),{success:!0,plan:g.data,attempts:a};s=g.errors,console.warn(`Plan validation failed on attempt ${a}`,{orgId:t.slice(0,8)+"...",errors:g.errors})}catch(r){let e=r instanceof Error?r.message:"Unknown error";s=[`Provider error: ${e}`],console.error(`Plan generation error on attempt ${a}`,{orgId:t.slice(0,8)+"...",provider:o.name,error:e})}return console.error(`Plan generation failed after ${r} attempts`,{orgId:t.slice(0,8)+"...",provider:o.name,finalErrors:s}),{success:!1,errors:s.length>0?s:["Failed to generate valid plan"],attempts:r}}let y=l.Ry({prompt:l.Z_().min(10).max(2e3)});async function f(e){try{let{userId:t,orgId:r}=(0,p.I8)();if(!t||!r)return i.NextResponse.json({ok:!1,error:"Authentication required"},{status:401});let o=function(){let e=(({anthropic:["ANTHROPIC_API_KEY"],openai:["OPENAI_API_KEY"],google:["GOOGLE_API_KEY"],mistral:["MISTRAL_API_KEY"]})[process.env.MODEL_PROVIDER||"anthropic"]||[]).filter(e=>!process.env[e]);return{valid:0===e.length,missing:e}}();if(!o.valid)return console.error("LLM environment validation failed",{missing:o.missing}),i.NextResponse.json({ok:!1,error:"Service configuration error"},{status:500});let s=await e.json(),n=y.safeParse(s);if(!n.success)return i.NextResponse.json({ok:!1,error:"Invalid request",issues:n.error.issues.map(e=>({field:e.path.join("."),message:e.message}))},{status:400});let{prompt:a}=n.data;console.log("Plan generation request",{userId:t.slice(0,8)+"...",orgId:r.slice(0,8)+"...",promptLength:a.length});let l=await h({prompt:a,orgId:r,maxRetries:3});if(!l.success)return console.warn("Plan generation failed",{userId:t.slice(0,8)+"...",orgId:r.slice(0,8)+"...",attempts:l.attempts,errors:l.errors}),i.NextResponse.json({ok:!1,error:"Failed to generate valid plan",issues:l.errors||["Unknown error occurred"],suggestion:"Try rephrasing your request or being more specific about the automation steps you need."},{status:422});let c=(0,d.NH)(l.plan);if(!c.valid)return console.error("Final plan validation failed unexpectedly",{userId:t.slice(0,8)+"...",orgId:r.slice(0,8)+"...",errors:c.errors}),i.NextResponse.json({ok:!1,error:"Generated plan failed validation",issues:c.errors,suggestion:"Try rephrasing your request with different wording."},{status:422});return console.log("Plan generated successfully",{userId:t.slice(0,8)+"...",orgId:r.slice(0,8)+"...",planName:l.plan.name,stepCount:l.plan.steps.length,attempts:l.attempts}),i.NextResponse.json({ok:!0,plan:l.plan,meta:{attempts:l.attempts,stepCount:l.plan.steps.length}})}catch(e){return console.error("Plan API error",{error:e instanceof Error?e.message:"Unknown error",stack:e instanceof Error?e.stack:void 0}),i.NextResponse.json({ok:!1,error:"Internal server error",suggestion:"Please try again in a moment. If the problem persists, contact support."},{status:500})}}let v=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/plan/route",pathname:"/api/plan",filename:"route",bundlePath:"app/api/plan/route"},resolvedPagePath:"/Users/ediyaffe/Documents/GitHub/Arizu/app/api/plan/route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:P,staticGenerationAsyncStorage:x,serverHooks:I}=v,A="/api/plan/route";function w(){return(0,a.patchFetch)({serverHooks:I,staticGenerationAsyncStorage:x})}},70907:(e,t,r)=>{r.d(t,{NH:()=>c});var o=r(19619),s=r.n(o),n=r(28586),a=r.n(n);let i={type:"object",properties:{field:{type:"string"},op:{type:"string",enum:["contains","equals","gt","lt","regex"]},value:{}},required:["field","op","value"],additionalProperties:!1},p=new(s())({allErrors:!0,verbose:!0,strict:!0,removeAdditional:!1});a()(p),p.addSchema({$id:"stepSchema",oneOf:[{type:"object",properties:{type:{type:"string",const:"trigger.http"},path:{type:"string"},secretHmac:{type:"boolean"}},required:["type","path","secretHmac"],additionalProperties:!1},{type:"object",properties:{type:{type:"string",const:"filter"},when:i},required:["type","when"],additionalProperties:!1},{type:"object",properties:{type:{type:"string",const:"action.slack.postMessage"},channel:{type:"string"},text:{type:"string"}},required:["type","channel","text"],additionalProperties:!1},{type:"object",properties:{type:{type:"string",const:"action.http.request"},method:{type:"string",enum:["GET","POST","PUT","DELETE"]},url:{type:"string"},headers:{type:"object",nullable:!0,additionalProperties:!0},body:{type:"object",nullable:!0,additionalProperties:!0}},required:["type","method","url"],additionalProperties:!1},{type:"object",properties:{type:{type:"string",const:"custom.action"},actionSlug:{type:"string"},input:{type:"object",nullable:!0,additionalProperties:!0}},required:["type","actionSlug"],additionalProperties:!1},{type:"object",properties:{type:{type:"string",const:"branch"},cases:{type:"array",items:{type:"object",properties:{when:i,steps:{type:"array",items:{$ref:"stepSchema"}}},required:["when","steps"],additionalProperties:!1},minItems:1},else:{type:"array",items:{$ref:"stepSchema"},nullable:!0}},required:["type","cases"],additionalProperties:!1}]});let l=p.compile({type:"object",properties:{version:{type:"string",const:"1"},name:{type:"string",minLength:1,maxLength:100},steps:{type:"array",items:{$ref:"stepSchema"},minItems:1,maxItems:50}},required:["version","name","steps"],additionalProperties:!1});function c(e){return l(e)?{valid:!0,errors:[],data:e}:{valid:!1,errors:l.errors?.map(e=>{let t=e.instancePath||"root",r=e.message||"validation failed";if("required"===e.keyword){let r=e.params?.missingProperty;return`Missing required property "${r}" at ${t}`}if("enum"===e.keyword){let r=e.params?.allowedValues;return`Invalid value at ${t}. Must be one of: ${r?.join(", ")}`}if("const"===e.keyword){let r=e.params?.allowedValue;return`Invalid value at ${t}. Must be: ${r}`}if("minItems"===e.keyword){let r=e.params?.limit;return`Array at ${t} must have at least ${r} items`}if("maxItems"===e.keyword){let r=e.params?.limit;return`Array at ${t} must have no more than ${r} items`}if("minLength"===e.keyword){let r=e.params?.limit;return`String at ${t} must be at least ${r} characters long`}if("maxLength"===e.keyword){let r=e.params?.limit;return`String at ${t} must be no more than ${r} characters long`}return"oneOf"===e.keyword?`Invalid step type at ${t}. Must be one of: trigger.http, filter, branch, action.slack.postMessage, action.http.request, custom.action`:`${r} at ${t}`})||["Unknown validation error"]}}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[948,14,471,696,586],()=>r(76109));module.exports=o})();