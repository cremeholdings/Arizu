"use strict";exports.id=599,exports.ids=[599],exports.modules={9487:(e,t,r)=>{r.d(t,{db:()=>o});var n=r(53524);let o=globalThis.prisma??new n.PrismaClient({log:["query"]})},17081:(e,t,r)=>{r.d(t,{Nv:()=>s,QJ:()=>i,S0:()=>l,fE:()=>g,qL:()=>m});var n=r(9487);let o={FREE:{features:["basic_automations","email_notifications","community_support"]},PRO:{features:["basic_automations","advanced_triggers","webhooks","email_notifications","slack_integration","priority_support","analytics_basic"]},TEAM:{features:["basic_automations","advanced_triggers","webhooks","email_notifications","slack_integration","team_collaboration","user_management","priority_support","analytics_advanced","custom_branding"]},ENTERPRISE:{features:["basic_automations","advanced_triggers","webhooks","email_notifications","slack_integration","team_collaboration","user_management","code_steps","custom_integrations","sso","audit_logs","dedicated_support","analytics_enterprise","custom_branding","sla_guarantee"]}},a={FREE:{monthlyRuns:100,workflows:3,actionsAllowed:5,codeSteps:!1},PRO:{monthlyRuns:1e4,workflows:50,actionsAllowed:20,codeSteps:!1},TEAM:{monthlyRuns:5e4,workflows:200,actionsAllowed:50,codeSteps:!0},ENTERPRISE:{monthlyRuns:5e5,workflows:1e3,actionsAllowed:100,codeSteps:!0}},s={FREE:{key:"FREE",name:"Free",description:"Perfect for getting started with automation",price:{monthly:0,yearly:0},features:o.FREE.features,limits:a.FREE},PRO:{key:"PRO",name:"Pro",description:"For individuals and small teams",price:{monthly:29,yearly:290},features:o.PRO.features,limits:a.PRO,popular:!0},TEAM:{key:"TEAM",name:"Team",description:"For growing teams and businesses",price:{monthly:99,yearly:990},features:o.TEAM.features,limits:a.TEAM},ENTERPRISE:{key:"ENTERPRISE",name:"Enterprise",description:"For large organizations with advanced needs",price:{monthly:299,yearly:2990},features:o.ENTERPRISE.features,limits:a.ENTERPRISE}};async function i(e){try{let t=await n.db.organization.findUnique({where:{clerkId:e},select:{planType:!0}});if(!t)throw Error(`Organization not found: ${e}`);return function(e){switch(e){case"FREE":default:return"FREE";case"PRO":case"STARTER":return"PRO";case"ENTERPRISE":return"ENTERPRISE"}}(t.planType)}catch(t){return console.error("Error getting plan for organization:",{orgId:e.slice(0,8)+"...",error:t instanceof Error?t.message:"Unknown error"}),"FREE"}}function u(){let e=new Date;return`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}`}async function l(e){try{let[t,r,n]=await Promise.all([i(e),c(e),d(e)]),o=a[t];return{monthlyRunsUsed:r.monthlyRunsUsed,monthlyRunsLimit:o.monthlyRuns,workflowsCount:n,workflowsLimit:o.workflows,actionsLimit:o.actionsAllowed,hasCodeSteps:o.codeSteps}}catch(t){return console.error("Error getting current usage:",{orgId:e.slice(0,8)+"...",error:t instanceof Error?t.message:"Unknown error"}),{monthlyRunsUsed:0,monthlyRunsLimit:0,workflowsCount:0,workflowsLimit:0,actionsLimit:0,hasCodeSteps:!1}}}async function c(e){let t=u();return await n.db.usageCounter.upsert({where:{organizationId_periodKey:{organizationId:e,periodKey:t}},update:{},create:{organizationId:e,periodKey:t,monthlyRunsUsed:0,monthlyRunsLimit:0,workflowsCount:0}})}async function d(e){return await n.db.automation.count({where:{organizationId:e,isActive:!0}})}async function g(e,t=1){let r=u();await n.db.usageCounter.upsert({where:{organizationId_periodKey:{organizationId:e,periodKey:r}},update:{monthlyRunsUsed:{increment:t}},create:{organizationId:e,periodKey:r,monthlyRunsUsed:t,monthlyRunsLimit:0,workflowsCount:0}})}function m(e){let t=["FREE","PRO","TEAM","ENTERPRISE"],r=t.indexOf(e);return -1===r||r===t.length-1?null:t[r+1]}},8466:(e,t,r)=>{r.d(t,{FN:()=>s,TH:()=>o});var n=r(9487);async function o(e,t){try{console.log("Appending log entry",{runId:e.slice(0,8)+"...",step:t.step,hasInput:!!t.input,hasOutput:!!t.output,hasError:!!t.error});let r=t.input?a(t.input):null,o=t.output?a(t.output):null,s=t.error?t.error.replace(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g,"[EMAIL]").replace(/\b(?:sk|pk)_[a-zA-Z0-9]{32,}\b/g,"[API_KEY]").replace(/\b(?:Bearer\s+)[a-zA-Z0-9_-]+/g,"Bearer [TOKEN]").replace(/\b(?:password|pwd|secret|token|key)\s*[:=]\s*\S+/gi,"$1: [REDACTED]").substring(0,1e3):null;await n.db.$executeRaw`
      INSERT INTO run_logs (id, run_id, step, input_data, output_data, error_message, timestamp)
      VALUES (
        ${`log_${Date.now()}_${Math.random().toString(36).substring(2,15)}`},
        ${e},
        ${t.step},
        ${r?JSON.stringify(r):null}::jsonb,
        ${o?JSON.stringify(o):null}::jsonb,
        ${s},
        ${t.timestamp||new Date}
      )
      ON CONFLICT (run_id, step, timestamp) DO NOTHING
    `,console.log("Log entry appended successfully",{runId:e.slice(0,8)+"...",step:t.step})}catch(r){console.error("Error appending log entry",{runId:e.slice(0,8)+"...",step:t.step,error:r instanceof Error?r.message:"Unknown error"})}}function a(e){let t=["password","pwd","secret","token","key","auth","authorization","email","phone","ssn","credit_card","creditcard","cc_number","api_key","apikey","access_token","refresh_token","bearer","x-api-key","x-auth-token","x-hub-signature","x-signature"],r=function e(r,n=0){if(n>5)return"[MAX_DEPTH_EXCEEDED]";if(null==r)return r;if("string"==typeof r)return r.length>1e3?r.substring(0,1e3)+"... [TRUNCATED]":r;if("number"==typeof r||"boolean"==typeof r)return r;if(Array.isArray(r)){let t=r.slice(0,50).map(t=>e(t,n+1));return r.length>50&&t.push(`... [${r.length-50} more items truncated]`),t}if("object"==typeof r){let o={},a=0;for(let[s,i]of Object.entries(r)){if(a>=20){o["..."]="[TOO_MANY_KEYS_TRUNCATED]";break}let r=s.toLowerCase();t.some(e=>r.includes(e))?o[s]="[REDACTED]":o[s]=e(i,n+1),a++}return o}return String(r).substring(0,1e3)}(e),n=JSON.stringify(r);return n.length>10240?{...r,_truncated:!0,_originalSize:n.length,_note:"Data truncated due to size limits"}:r}async function s(e,t){try{let r=t?`WHERE ar.organization_id = ${e} AND rl.run_id = ${t}`:`WHERE ar.organization_id = ${e}`,o=(await n.db.$queryRaw`
      SELECT
        COUNT(*) as total_logs,
        COUNT(CASE WHEN rl.error_message IS NOT NULL THEN 1 END) as error_logs,
        COUNT(DISTINCT rl.step) as unique_steps,
        COUNT(DISTINCT rl.run_id) as unique_runs
      FROM run_logs rl
      INNER JOIN automation_runs ar ON ar.id = rl.run_id
      ${r}
    `)[0],a=Number(o.total_logs),s=Number(o.error_logs),i=Number(o.unique_steps),u=Number(o.unique_runs);return{totalLogs:a,errorLogs:s,uniqueSteps:i,avgLogsPerRun:u>0?Math.round(a/u):0}}catch(r){return console.error("Error getting log statistics",{orgId:e.slice(0,8)+"...",runId:t?.slice(0,8)+"...",error:r instanceof Error?r.message:"Unknown error"}),{totalLogs:0,errorLogs:0,uniqueSteps:0,avgLogsPerRun:0}}}},59698:(e,t,r)=>{r.d(t,{Kg:()=>s,Mk:()=>u,dv:()=>d,zQ:()=>i});var n=r(9487),o=r(17081),a=r(53524);class s extends Error{constructor(e,t,r,n){super(t),this.code=e,this.currentUsage=r,this.limit=n,this.name="RunLimitError"}}async function i(e,t,r,i){try{console.log("Recording run start",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"...",automationId:r?.slice(0,8)+"...",userId:i?.slice(0,8)+"..."});let s=await n.db.automationRun.findUnique({where:{id:t}});if(s){console.log("Run already exists, skipping start recording",{runId:t.slice(0,8)+"...",status:s.status});return}await n.db.automationRun.create({data:{id:t,organizationId:e,automationId:r||"unknown",userId:i||"system",status:a.RunStatus.RUNNING,startedAt:new Date,inputData:{}}}),await (0,o.fE)(e,1),console.log("Run start recorded successfully",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"..."})}catch(r){throw console.error("Error recording run start",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"...",error:r instanceof Error?r.message:"Unknown error"}),new s("RUN_START_RECORDING_FAILED","Failed to record run start. Please try again.")}}async function u(e,t,r){try{console.log("Recording run end",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"...",status:r.status,hasError:!!r.errorMessage,executionTime:r.executionTime}),await n.db.automationRun.findUnique({where:{id:t}})?await n.db.automationRun.update({where:{id:t},data:{status:"ok"===r.status?a.RunStatus.SUCCESS:a.RunStatus.FAILED,completedAt:new Date,errorMessage:r.errorMessage?l(r.errorMessage):null,outputData:r.outputData?c(r.outputData):null}}):(console.warn("Run not found for end recording",{runId:t.slice(0,8)+"...",status:r.status}),await n.db.automationRun.create({data:{id:t,organizationId:e,automationId:"unknown",userId:"system",status:"ok"===r.status?a.RunStatus.SUCCESS:a.RunStatus.FAILED,startedAt:new Date,completedAt:new Date,errorMessage:r.errorMessage?l(r.errorMessage):null,outputData:r.outputData?c(r.outputData):null}})),console.log("Run end recorded successfully",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"...",finalStatus:r.status})}catch(n){throw console.error("Error recording run end",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"...",status:r.status,error:n instanceof Error?n.message:"Unknown error"}),new s("RUN_END_RECORDING_FAILED","Failed to record run end. Please try again.")}}function l(e){return e.replace(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g,"[EMAIL]").replace(/\b(?:sk|pk)_[a-zA-Z0-9]{32,}\b/g,"[API_KEY]").replace(/\b(?:Bearer\s+)[a-zA-Z0-9_-]+/g,"Bearer [TOKEN]").replace(/\b(?:password|pwd|secret|token|key)\s*[:=]\s*\S+/gi,"$1: [REDACTED]").substring(0,1e3)}function c(e){let t=["password","pwd","secret","token","key","auth","authorization","email","phone","ssn","credit_card","creditcard","cc_number","api_key","apikey","access_token","refresh_token","bearer","x-api-key","x-auth-token"];return function e(r,n=0){if(n>5)return"[MAX_DEPTH_EXCEEDED]";if("object"!=typeof r||null===r)return r;if(Array.isArray(r))return r.slice(0,10).map(t=>e(t,n+1));let o={},a=0;for(let[s,i]of Object.entries(r)){if(a>=20){o["..."]="[TRUNCATED]";break}let r=s.toLowerCase();t.some(e=>r.includes(e))?o[s]="[REDACTED]":"string"==typeof i&&i.length>500?o[s]=i.substring(0,500)+"... [TRUNCATED]":o[s]=e(i,n+1),a++}return o}(e)}async function d(e,t=30){try{let r=new Date;r.setDate(r.getDate()-t);let o=await n.db.automationRun.findMany({where:{organizationId:e,startedAt:{gte:r}},include:{automation:{select:{id:!0,name:!0}}}}),s=o.length,i=o.filter(e=>e.status===a.RunStatus.SUCCESS).length,u=o.filter(e=>e.status===a.RunStatus.FAILED).length,l=o.filter(e=>e.startedAt&&e.completedAt),c=l.reduce((e,t)=>{let r=t.completedAt.getTime()-t.startedAt.getTime();return e+r},0),d=l.length>0?Math.round(c/l.length):0,g=new Map;o.forEach(e=>{let t=e.automationId,r=e.automation?.name||"Unknown",n=g.get(t)||{name:r,count:0};g.set(t,{name:r,count:n.count+1})});let m=Array.from(g.entries()).map(([e,t])=>({id:e,name:t.name,runCount:t.count})).sort((e,t)=>t.runCount-e.runCount).slice(0,5);return{totalRuns:s,successfulRuns:i,failedRuns:u,averageExecutionTime:d,mostActiveAutomations:m}}catch(t){return console.error("Error getting run statistics",{orgId:e.slice(0,8)+"...",error:t instanceof Error?t.message:"Unknown error"}),{totalRuns:0,successfulRuns:0,failedRuns:0,averageExecutionTime:0,mostActiveAutomations:[]}}}}};