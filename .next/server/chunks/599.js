"use strict";exports.id=599,exports.ids=[599],exports.modules={9487:(e,t,r)=>{r.d(t,{db:()=>o});var n=r(53524);let o=globalThis.prisma??new n.PrismaClient({log:["query"]})},60594:(e,t,r)=>{function n(e,t,r){return{ok:!1,code:"RATE_LIMIT",message:e,retryAfterSec:t||r?.retryAfterSec,meta:r}}function o(e="Authentication required",t){return{ok:!1,code:"UNAUTHORIZED",message:e,meta:t}}function s(e="Internal server error",t){return{ok:!1,code:"SERVER_ERROR",message:e,meta:t}}function a(e,t,r){return{ok:!1,code:"VALIDATION_ERROR",message:e,meta:{...r,issues:t}}}function i(e,t){return{ok:!1,code:"COMPILATION_ERROR",message:e,meta:t}}r.d(t,{Bp:()=>a,Hs:()=>o,I3:()=>s,PP:()=>l,Uf:()=>i,eQ:()=>c,hb:()=>n,hr:()=>u,rY:()=>d});class u extends Error{constructor(e){super(e.message),this.response=e,this.name="TypedError"}static isPlanLimit(e){return e instanceof u&&"PLAN_LIMIT"===e.response.code}static isFeatureLocked(e){return e instanceof u&&"FEATURE_LOCKED"===e.response.code}static isRateLimit(e){return e instanceof u&&"RATE_LIMIT"===e.response.code}static isCircuitOpen(e){return e instanceof u&&"CIRCUIT_OPEN"===e.response.code}static isBadRequest(e){return e instanceof u&&"BAD_REQUEST"===e.response.code}static isUnauthorized(e){return e instanceof u&&"UNAUTHORIZED"===e.response.code}static isForbidden(e){return e instanceof u&&"FORBIDDEN"===e.response.code}static isNotFound(e){return e instanceof u&&"NOT_FOUND"===e.response.code}static isServerError(e){return e instanceof u&&"SERVER_ERROR"===e.response.code}}function c(e,t){throw new u({ok:!1,code:"PLAN_LIMIT",message:e,meta:t})}function l(e,t){throw new u({ok:!1,code:"FEATURE_LOCKED",message:e,meta:t})}function d(e){switch(e.code){case"BAD_REQUEST":case"VALIDATION_ERROR":return 400;case"UNAUTHORIZED":return 401;case"FORBIDDEN":case"PLAN_LIMIT":case"FEATURE_LOCKED":return 403;case"NOT_FOUND":return 404;case"COMPILATION_ERROR":return 422;case"RATE_LIMIT":return 429;case"SERVER_ERROR":default:return 500;case"CIRCUIT_OPEN":return 503}}},17081:(e,t,r)=>{r.d(t,{Nv:()=>a,QJ:()=>i,S0:()=>c,fE:()=>E,qL:()=>g});var n=r(9487);let o={FREE:{features:["basic_automations","email_notifications","community_support"]},PRO:{features:["basic_automations","advanced_triggers","webhooks","email_notifications","slack_integration","priority_support","analytics_basic"]},TEAM:{features:["basic_automations","advanced_triggers","webhooks","email_notifications","slack_integration","team_collaboration","user_management","priority_support","analytics_advanced","custom_branding"]},ENTERPRISE:{features:["basic_automations","advanced_triggers","webhooks","email_notifications","slack_integration","team_collaboration","user_management","code_steps","custom_integrations","sso","audit_logs","dedicated_support","analytics_enterprise","custom_branding","sla_guarantee"]}},s={FREE:{monthlyRuns:100,workflows:3,actionsAllowed:5,codeSteps:!1},PRO:{monthlyRuns:1e4,workflows:50,actionsAllowed:20,codeSteps:!1},TEAM:{monthlyRuns:5e4,workflows:200,actionsAllowed:50,codeSteps:!0},ENTERPRISE:{monthlyRuns:5e5,workflows:1e3,actionsAllowed:100,codeSteps:!0}},a={FREE:{key:"FREE",name:"Free",description:"Perfect for getting started with automation",price:{monthly:0,yearly:0},features:o.FREE.features,limits:s.FREE},PRO:{key:"PRO",name:"Pro",description:"For individuals and small teams",price:{monthly:29,yearly:290},features:o.PRO.features,limits:s.PRO,popular:!0},TEAM:{key:"TEAM",name:"Team",description:"For growing teams and businesses",price:{monthly:99,yearly:990},features:o.TEAM.features,limits:s.TEAM},ENTERPRISE:{key:"ENTERPRISE",name:"Enterprise",description:"For large organizations with advanced needs",price:{monthly:299,yearly:2990},features:o.ENTERPRISE.features,limits:s.ENTERPRISE}};async function i(e){try{let t=await n.db.organization.findUnique({where:{clerkId:e},select:{planType:!0}});if(!t)throw Error(`Organization not found: ${e}`);return function(e){switch(e){case"FREE":default:return"FREE";case"PRO":case"STARTER":return"PRO";case"ENTERPRISE":return"ENTERPRISE"}}(t.planType)}catch(t){return console.error("Error getting plan for organization:",{orgId:e.slice(0,8)+"...",error:t instanceof Error?t.message:"Unknown error"}),"FREE"}}function u(){let e=new Date;return`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}`}async function c(e){try{let[t,r,n]=await Promise.all([i(e),l(e),d(e)]),o=s[t];return{monthlyRunsUsed:r.monthlyRunsUsed,monthlyRunsLimit:o.monthlyRuns,workflowsCount:n,workflowsLimit:o.workflows,actionsLimit:o.actionsAllowed,hasCodeSteps:o.codeSteps}}catch(t){return console.error("Error getting current usage:",{orgId:e.slice(0,8)+"...",error:t instanceof Error?t.message:"Unknown error"}),{monthlyRunsUsed:0,monthlyRunsLimit:0,workflowsCount:0,workflowsLimit:0,actionsLimit:0,hasCodeSteps:!1}}}async function l(e){let t=u();return await n.db.usageCounter.upsert({where:{organizationId_periodKey:{organizationId:e,periodKey:t}},update:{},create:{organizationId:e,periodKey:t,monthlyRunsUsed:0,monthlyRunsLimit:0,workflowsCount:0}})}async function d(e){return await n.db.automation.count({where:{organizationId:e,isActive:!0}})}async function E(e,t=1){let r=u();await n.db.usageCounter.upsert({where:{organizationId_periodKey:{organizationId:e,periodKey:r}},update:{monthlyRunsUsed:{increment:t}},create:{organizationId:e,periodKey:r,monthlyRunsUsed:t,monthlyRunsLimit:0,workflowsCount:0}})}function g(e){let t=["FREE","PRO","TEAM","ENTERPRISE"],r=t.indexOf(e);return -1===r||r===t.length-1?null:t[r+1]}},8466:(e,t,r)=>{r.d(t,{FN:()=>a,TH:()=>o});var n=r(9487);async function o(e,t){try{console.log("Appending log entry",{runId:e.slice(0,8)+"...",step:t.step,hasInput:!!t.input,hasOutput:!!t.output,hasError:!!t.error});let r=t.input?s(t.input):null,o=t.output?s(t.output):null,a=t.error?t.error.replace(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g,"[EMAIL]").replace(/\b(?:sk|pk)_[a-zA-Z0-9]{32,}\b/g,"[API_KEY]").replace(/\b(?:Bearer\s+)[a-zA-Z0-9_-]+/g,"Bearer [TOKEN]").replace(/\b(?:password|pwd|secret|token|key)\s*[:=]\s*\S+/gi,"$1: [REDACTED]").substring(0,1e3):null;await n.db.$executeRaw`
      INSERT INTO run_logs (id, run_id, step, input_data, output_data, error_message, timestamp)
      VALUES (
        ${`log_${Date.now()}_${Math.random().toString(36).substring(2,15)}`},
        ${e},
        ${t.step},
        ${r?JSON.stringify(r):null}::jsonb,
        ${o?JSON.stringify(o):null}::jsonb,
        ${a},
        ${t.timestamp||new Date}
      )
      ON CONFLICT (run_id, step, timestamp) DO NOTHING
    `,console.log("Log entry appended successfully",{runId:e.slice(0,8)+"...",step:t.step})}catch(r){console.error("Error appending log entry",{runId:e.slice(0,8)+"...",step:t.step,error:r instanceof Error?r.message:"Unknown error"})}}function s(e){let t=["password","pwd","secret","token","key","auth","authorization","email","phone","ssn","credit_card","creditcard","cc_number","api_key","apikey","access_token","refresh_token","bearer","x-api-key","x-auth-token","x-hub-signature","x-signature"],r=function e(r,n=0){if(n>5)return"[MAX_DEPTH_EXCEEDED]";if(null==r)return r;if("string"==typeof r)return r.length>1e3?r.substring(0,1e3)+"... [TRUNCATED]":r;if("number"==typeof r||"boolean"==typeof r)return r;if(Array.isArray(r)){let t=r.slice(0,50).map(t=>e(t,n+1));return r.length>50&&t.push(`... [${r.length-50} more items truncated]`),t}if("object"==typeof r){let o={},s=0;for(let[a,i]of Object.entries(r)){if(s>=20){o["..."]="[TOO_MANY_KEYS_TRUNCATED]";break}let r=a.toLowerCase();t.some(e=>r.includes(e))?o[a]="[REDACTED]":o[a]=e(i,n+1),s++}return o}return String(r).substring(0,1e3)}(e),n=JSON.stringify(r);return n.length>10240?{...r,_truncated:!0,_originalSize:n.length,_note:"Data truncated due to size limits"}:r}async function a(e,t){try{let r=t?`WHERE ar.organization_id = ${e} AND rl.run_id = ${t}`:`WHERE ar.organization_id = ${e}`,o=(await n.db.$queryRaw`
      SELECT
        COUNT(*) as total_logs,
        COUNT(CASE WHEN rl.error_message IS NOT NULL THEN 1 END) as error_logs,
        COUNT(DISTINCT rl.step) as unique_steps,
        COUNT(DISTINCT rl.run_id) as unique_runs
      FROM run_logs rl
      INNER JOIN automation_runs ar ON ar.id = rl.run_id
      ${r}
    `)[0],s=Number(o.total_logs),a=Number(o.error_logs),i=Number(o.unique_steps),u=Number(o.unique_runs);return{totalLogs:s,errorLogs:a,uniqueSteps:i,avgLogsPerRun:u>0?Math.round(s/u):0}}catch(r){return console.error("Error getting log statistics",{orgId:e.slice(0,8)+"...",runId:t?.slice(0,8)+"...",error:r instanceof Error?r.message:"Unknown error"}),{totalLogs:0,errorLogs:0,uniqueSteps:0,avgLogsPerRun:0}}}},59698:(e,t,r)=>{r.d(t,{Mk:()=>c,dv:()=>E,zQ:()=>u});var n=r(9487),o=r(17081),s=r(53524),a=r(60594);class i extends a.hr{constructor(e,t,r,n){super({ok:!1,code:"PLAN_LIMIT",message:t,meta:{limit:n||0,used:r||0}}),this.code=e,this.currentUsage=r,this.limit=n,this.name="RunLimitError"}}async function u(e,t,r,a){try{console.log("Recording run start",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"...",automationId:r?.slice(0,8)+"...",userId:a?.slice(0,8)+"..."});let i=await n.db.automationRun.findUnique({where:{id:t}});if(i){console.log("Run already exists, skipping start recording",{runId:t.slice(0,8)+"...",status:i.status});return}await n.db.automationRun.create({data:{id:t,organizationId:e,automationId:r||"unknown",userId:a||"system",status:s.RunStatus.RUNNING,startedAt:new Date,inputData:{}}}),await (0,o.fE)(e,1),console.log("Run start recorded successfully",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"..."})}catch(r){throw console.error("Error recording run start",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"...",error:r instanceof Error?r.message:"Unknown error"}),new i("RUN_START_RECORDING_FAILED","Failed to record run start. Please try again.")}}async function c(e,t,r){try{console.log("Recording run end",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"...",status:r.status,hasError:!!r.errorMessage,executionTime:r.executionTime}),await n.db.automationRun.findUnique({where:{id:t}})?await n.db.automationRun.update({where:{id:t},data:{status:"ok"===r.status?s.RunStatus.SUCCESS:s.RunStatus.FAILED,completedAt:new Date,errorMessage:r.errorMessage?l(r.errorMessage):null,outputData:r.outputData?d(r.outputData):null}}):(console.warn("Run not found for end recording",{runId:t.slice(0,8)+"...",status:r.status}),await n.db.automationRun.create({data:{id:t,organizationId:e,automationId:"unknown",userId:"system",status:"ok"===r.status?s.RunStatus.SUCCESS:s.RunStatus.FAILED,startedAt:new Date,completedAt:new Date,errorMessage:r.errorMessage?l(r.errorMessage):null,outputData:r.outputData?d(r.outputData):null}})),console.log("Run end recorded successfully",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"...",finalStatus:r.status})}catch(n){throw console.error("Error recording run end",{orgId:e.slice(0,8)+"...",runId:t.slice(0,8)+"...",status:r.status,error:n instanceof Error?n.message:"Unknown error"}),new i("RUN_END_RECORDING_FAILED","Failed to record run end. Please try again.")}}function l(e){return e.replace(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g,"[EMAIL]").replace(/\b(?:sk|pk)_[a-zA-Z0-9]{32,}\b/g,"[API_KEY]").replace(/\b(?:Bearer\s+)[a-zA-Z0-9_-]+/g,"Bearer [TOKEN]").replace(/\b(?:password|pwd|secret|token|key)\s*[:=]\s*\S+/gi,"$1: [REDACTED]").substring(0,1e3)}function d(e){let t=["password","pwd","secret","token","key","auth","authorization","email","phone","ssn","credit_card","creditcard","cc_number","api_key","apikey","access_token","refresh_token","bearer","x-api-key","x-auth-token"];return function e(r,n=0){if(n>5)return"[MAX_DEPTH_EXCEEDED]";if("object"!=typeof r||null===r)return r;if(Array.isArray(r))return r.slice(0,10).map(t=>e(t,n+1));let o={},s=0;for(let[a,i]of Object.entries(r)){if(s>=20){o["..."]="[TRUNCATED]";break}let r=a.toLowerCase();t.some(e=>r.includes(e))?o[a]="[REDACTED]":"string"==typeof i&&i.length>500?o[a]=i.substring(0,500)+"... [TRUNCATED]":o[a]=e(i,n+1),s++}return o}(e)}async function E(e,t=30){try{let r=new Date;r.setDate(r.getDate()-t);let o=await n.db.automationRun.findMany({where:{organizationId:e,startedAt:{gte:r}},include:{automation:{select:{id:!0,name:!0}}}}),a=o.length,i=o.filter(e=>e.status===s.RunStatus.SUCCESS).length,u=o.filter(e=>e.status===s.RunStatus.FAILED).length,c=o.filter(e=>e.startedAt&&e.completedAt),l=c.reduce((e,t)=>{let r=t.completedAt.getTime()-t.startedAt.getTime();return e+r},0),d=c.length>0?Math.round(l/c.length):0,E=new Map;o.forEach(e=>{let t=e.automationId,r=e.automation?.name||"Unknown",n=E.get(t)||{name:r,count:0};E.set(t,{name:r,count:n.count+1})});let g=Array.from(E.entries()).map(([e,t])=>({id:e,name:t.name,runCount:t.count})).sort((e,t)=>t.runCount-e.runCount).slice(0,5);return{totalRuns:a,successfulRuns:i,failedRuns:u,averageExecutionTime:d,mostActiveAutomations:g}}catch(t){return console.error("Error getting run statistics",{orgId:e.slice(0,8)+"...",error:t instanceof Error?t.message:"Unknown error"}),{totalRuns:0,successfulRuns:0,failedRuns:0,averageExecutionTime:0,mostActiveAutomations:[]}}}}};