# ====================================================================
# Arizu Production Docker Environment Configuration
# ====================================================================
#
# ⚠️  IMPORTANT SECURITY NOTICE ⚠️
# This file contains production configuration templates.
# DO NOT use these example values in production!
# Generate secure values for all secrets and passwords!
#
# ====================================================================

# Domain and SSL Configuration
# -----------------------------
# Your production domain (must be pointed to your server)
DOMAIN=automation.example.com

# Email for Let's Encrypt certificate registration
EMAIL=you@example.com

# Timezone for all containers
TZ=UTC

# Database Configuration (External)
# ----------------------------------
# Use managed database services like AWS RDS, Google Cloud SQL, etc.
DB_HOST=your-postgres-host.amazonaws.com
DB_PORT=5432
DB_USER=arizu_prod
DB_PASSWORD=CHANGE_THIS_SECURE_DB_PASSWORD_123456789
DB_NAME=arizu_production

# Redis Configuration (External)
# -------------------------------
# Use managed Redis services like AWS ElastiCache, Redis Cloud, etc.
REDIS_HOST=your-redis-host.amazonaws.com
REDIS_PORT=6379
REDIS_PASSWORD=CHANGE_THIS_SECURE_REDIS_PASSWORD_123456789

# n8n Security Configuration
# ---------------------------
# CRITICAL: Generate a long, random encryption key (32+ characters)
# You can generate one with: openssl rand -base64 32
N8N_ENCRYPTION_KEY=CHANGE_THIS_LONG_RANDOM_ENCRYPTION_KEY_AT_LEAST_32_CHARS

# JWT Secret for user management (32+ characters)
# Generate with: openssl rand -base64 32
N8N_JWT_SECRET=CHANGE_THIS_JWT_SECRET_32_CHARS_MINIMUM

# Traefik Dashboard Authentication (Optional)
# -------------------------------------------
# Generate password hash with: echo $(htpasswd -nb admin yourpassword) | sed -e s/\\$/\\$\\$/g
# Default below is admin:admin - CHANGE THIS!
TRAEFIK_AUTH=admin:$$2y$$10$$0000000000000000000000000000000000000000000000000000000000

# n8n Performance Configuration
# ------------------------------
# Maximum concurrent workflow executions
N8N_CONCURRENCY_LIMIT=10

# Email Configuration (Optional - for n8n notifications)
# -------------------------------------------------------
EMAIL_MODE=smtp
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password
SMTP_SENDER=noreply@automation.example.com
SMTP_SSL=true

# Advanced Configuration (Optional)
# ----------------------------------
# Uncomment and modify these if needed:

# Custom SSL certificate paths (if not using Let's Encrypt)
# SSL_CERT_PATH=/path/to/certificate.crt
# SSL_KEY_PATH=/path/to/private.key

# Database SSL configuration
# DB_SSL_CA=/path/to/ca-certificate.crt
# DB_SSL_CERT=/path/to/client-certificate.crt
# DB_SSL_KEY=/path/to/client-key.key

# ====================================================================
# Production Deployment Checklist:
# ====================================================================
#
# □ Change DOMAIN to your actual domain
# □ Change EMAIL to your real email address
# □ Generate secure DB_PASSWORD (use a password manager)
# □ Generate secure REDIS_PASSWORD (use a password manager)
# □ Generate N8N_ENCRYPTION_KEY (openssl rand -base64 32)
# □ Generate N8N_JWT_SECRET (openssl rand -base64 32)
# □ Generate TRAEFIK_AUTH hash (htpasswd -nb admin newpassword)
# □ Set up DNS A record pointing DOMAIN to your server IP
# □ Ensure firewall allows ports 80 and 443
# □ Set up external PostgreSQL database
# □ Set up external Redis instance
# □ Configure backup strategy for n8n data volume
# □ Set up monitoring and alerting
# □ Review security headers in traefik.yml
# □ Test certificate renewal (certbot or Let's Encrypt)
#
# ====================================================================

# ====================================================================
# Environment-Specific Notes:
# ====================================================================
#
# AWS Deployment:
# - Use RDS for PostgreSQL
# - Use ElastiCache for Redis
# - Use ECS or EC2 for Docker containers
# - Use Route 53 for DNS
# - Use CloudWatch for logging
#
# Google Cloud Deployment:
# - Use Cloud SQL for PostgreSQL
# - Use Memorystore for Redis
# - Use Cloud Run or Compute Engine
# - Use Cloud DNS
# - Use Cloud Logging
#
# DigitalOcean Deployment:
# - Use Managed Database for PostgreSQL
# - Use Managed Redis
# - Use Droplets for Docker containers
# - Use DigitalOcean DNS
#
# Self-hosted/VPS:
# - Install PostgreSQL and Redis manually or via Docker
# - Use system services or Docker Compose
# - Configure regular backups
# - Set up monitoring (Prometheus, Grafana)
#
# ====================================================================